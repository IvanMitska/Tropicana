const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: path.join(__dirname, '.env') });

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true,
  },
  password: {
    type: String,
    required: true,
    minlength: 8,
  },
  role: {
    type: String,
    enum: ['user', 'admin'],
    default: 'user',
  },
}, { timestamps: true });

const User = mongoose.models.User || mongoose.model('User', UserSchema);

async function createAdmin() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    const mongoUri = process.env.MONGODB_URI || process.env.MONGODB_URL;
    if (!mongoUri) {
      console.error('‚ùå MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      process.exit(1);
    }

    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await mongoose.connect(mongoUri);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    const existingAdmin = await User.findOne({ email: 'admin@admin.com' });
    if (existingAdmin) {
      console.log('‚ö†Ô∏è  –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...');
      
      // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      const saltRounds = 10;
      const hashedPassword = await bcrypt.hash('rXguQLQz12345', saltRounds);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      await User.findByIdAndUpdate(existingAdmin._id, {
        password: hashedPassword,
        role: 'admin'
      });
      
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
      console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞...');
      
      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const saltRounds = 10;
      const hashedPassword = await bcrypt.hash('rXguQLQz12345', saltRounds);

      // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
      const admin = new User({
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        email: 'admin@admin.com',
        password: hashedPassword,
        role: 'admin'
      });

      await admin.save();
      console.log('‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    }

    console.log('\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('Email: admin@admin.com');
    console.log('–ü–∞—Ä–æ–ª—å: rXguQLQz12345');
    console.log('\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: http://localhost:3000/admin/login');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîö –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
    process.exit(0);
  }
}

createAdmin();