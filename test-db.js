const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const path = require('path');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º User –º–æ–¥–µ–ª—å
const User = require('./server/models/user.model');

async function createTestAdmin() {
  console.log('üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º email
    const existingAdmin = await User.findOne({ email: 'admin@admin.com' });
    if (existingAdmin) {
      console.log('‚ö†Ô∏è  –ê–¥–º–∏–Ω —Å email admin@admin.com —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å (–±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è pre-save middleware)
      existingAdmin.password = 'rXguQLQz12345';
      existingAdmin.role = 'admin';
      await existingAdmin.save();
      
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
      const admin = new User({
        name: 'Admin User',
        email: 'admin@admin.com',
        password: 'rXguQLQz12345', // –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω
        role: 'admin'
      });

      await admin.save();
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    }

    console.log('\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('Email: admin@admin.com');
    console.log('–ü–∞—Ä–æ–ª—å: rXguQLQz12345');
    console.log('\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: http://localhost:3000/admin/login');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error);
  }
}

async function testConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  console.log('MONGODB_URI:', process.env.MONGODB_URI);
  
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collections.map(c => c.name));
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    await createTestAdmin();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    console.log('üí° –ü–æ–ø—Ä–æ–±—É–µ–º —Å –ø—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π...');
    
    try {
      await mongoose.connect('mongodb://127.0.0.1:27017/rent-web-local');
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB!');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
      await createTestAdmin();
      
    } catch (localError) {
      console.error('‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', localError.message);
      console.log('üåê –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –±–∞–∑—É –Ω–∞ MongoDB Atlas...');
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–µ–º–æ-–±–∞–∑–µ
      try {
        const atlasUri = 'mongodb+srv://demo:demo123@cluster0.jxkxz.mongodb.net/rentapp?retryWrites=true&w=majority';
        await mongoose.connect(atlasUri);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Atlas!');
        console.log('üìù –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π:');
        console.log('MONGODB_URI=' + atlasUri);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ Atlas
        await createTestAdmin();
        
      } catch (atlasError) {
        console.error('‚ùå Atlas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', atlasError.message);
        console.log('');
        console.log('üõ†Ô∏è  –†–ï–®–ï–ù–ò–ï:');
        console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MongoDB –ª–æ–∫–∞–ª—å–Ω–æ: brew install mongodb-community');
        console.log('2. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –±–∞–∑—É –Ω–∞ https://cloud.mongodb.com');
        console.log('3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É setup: http://localhost:3001/admin/setup');
      }
    }
  } finally {
    await mongoose.disconnect();
    process.exit(0);
  }
}

testConnection();